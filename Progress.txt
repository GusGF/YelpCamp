407. Creating the basic express app
===================================
*************************************************************************************
I AM HERE............I AM HERE.............I AM HERE............I AM HERE............
*************************************************************************************
install npm packages express, mongoose & ejs
Import express into our app and create an instance
Setup express (our server) to listen on port 3000 for HTTP requests
Register a simple HTTP get request and send a simple response back to the requester
Create a views directory to facilitate our templating engine:
	Within create a dummy file called 'home.ejs' with some basic HTML
We're going to be using a templating engine:
	Tell express what templating engine we're using
	Import the path module and use it to then tell express where our templates (views) will be
Call a simple template file called 'home.ejs' and render it


408. Campground Model Basics (Mongoose)
=======================================
Create a directory for our Mongoose models:
	Within this directory create campground.js
Require Mongoose
Create a schema called 'campGroundSchema' as follows:
  title: String,
  price: String,
  description: String,
  location: String
Based on the schema create a model and export it
Connect to the mongoose DB:
	mongoose.connect('mongodb://localhost:27017/yelp-campDB', { 
	  useNewUrlParser: true,
	  useUnifiedTopology: true});
Assess whether the DB connection is good or there is an error:
	Set a variable for the Mongoose connection
	If there is an error report it to the console
	If the connection is open report this success to the console
Create a simple 'get' route for when a campground is created '/makecampground'
	Locically it should be a 'post' route but don't worry about this for now.
You will need to require the 'CampGround' model to work with it
Use the 'CampGround' model to create a campground under the above route
	Use the above route to view the object in the browser
	View the campground in the Node REPL i.e. view the document and collection.
	The callback for this route will need a 'wait' to allow time to save to the Mongo DB.


409. Seeding Campgrounds
========================
We want to create a file ('index.js' below) solely to clear out then seed our database when reqd
Use the following link to get the data files:
	https://github.com/Colt/YelpCamp/tree/c12b6ca9576b48b579bc304f701ebb71d6f9879a/seeds
From the above location copy files 'cities.js' & 'seedHelpers.js' to a new folder called 'seeds'
In the seeds folder create a file called 'index.js', use this to:
	Connect to mongoose and validate your DB connection:
		For the connection add an event listener to listen out for errors
		For a 'successful DB open' event create a one time listener
	In the 'seeds' folder create an index.js file with an async function 'seedDB()' to: 
		Clear the campgrounds collection of all documents
	Import from cities.js & seedHelpers.js
	Create a function to generate a random index for whatever array is passed to it.
	Use a for-loop to:	
		Using above random index, bring in the cities combining city & state for the location field
		Using above random index, combine 'descriptor' & 'place' fields for the title field
		Run seeds/index.js using node, not nodemon
		And you should end up with something like this in your 'campgrounds' collection:
{ ..., "title" : "Maple Hunting Camp", "location" : "Plymouth, Minnesota", "__v" : 0 }
{ ..., "title" : "Elk Mule Camp", "location" : "Newark, New Jersey", "__v" : 0 }
{ ..., "title" : "Forest Bay", "location" : "Lawrence, Massachusetts", "__v" : 0 }
{ ..., "title" : "Diamond Creek", "location" : "Shelton, Connecticut", "__v" : 0 }
	If 'seedDB()' has created the above i.e. has run successfully then it will have returned a promise:
		Use this to close the DB connection
	In the Mongo console count the number of rows created.
	
	
410. Campground Index
=====================
Get rid of the "app.get('/makeCampGround',..." route.
Create an camp ground index route:
	This should render a new file in views/campgrounds/index.ejs
	Use a for loop in the ejs file to iterate through all the camp grounds as a <li>
	
	
411. Campground Show
====================
Creat a route for displaying a campground based on the document ObjectId e.g. '/campgrounds/61f80ed...'
Ammend 'index.js' so that the list of campgrounds is a list of links.
Create an ejs file for displaying this single campground called 'show.ejs'
Implement the find within this new route using the route parameter
Display the campground's title, location in 'show.ejs'