407. Creating the basic express app
===================================
*************************************************************************************
I AM HERE............I AM HERE.............I AM HERE............I AM HERE............
*************************************************************************************
install npm packages express, mongoose & ejs
Import express into our app and create an instance
Setup express (our server) to listen on port 3000 for HTTP requests
Register a simple HTTP get request and send a simple response back to the requester
Create a views directory to facilitate our templating engine:
	Within create a dummy file called 'home.ejs' with some basic HTML
We're going to be using a templating engine:
	Tell express what templating engine we're using
	Import the path module and use it to then tell express where our templates (views) will be
Call a simple template file called 'home.ejs' and render it


408. Campground Model Basics (Mongoose)
=======================================
Create a directory for our Mongoose models:
	Within this directory create campground.js
Require Mongoose
Create a schema called 'campGroundSchema' as follows:
  title: String,
  price: String,
  description: String,
  location: String
Based on the schema create a model and export it
Connect to the mongoose DB:
	mongoose.connect('mongodb://localhost:27017/yelp-campDB', { 
	  useNewUrlParser: true,
	  useUnifiedTopology: true});
Assess whether the DB connection is good or there is an error:
	Set a variable for the Mongoose connection
	If there is an error report it to the console
	If the connection is open report this success to the console
Create a simple 'get' route for when a campground is created '/makecampground'
	Locically it should be a 'post' route but don't worry about this for now.
You will need to require the 'CampGround' model to work with it
Use the 'CampGround' model to create a campground under the above route
	Use the above route to view the object in the browser
	View the campground in the Node REPL i.e. view the document and collection.
	The callback for this route will need a 'wait' to allow time to save to the Mongo DB.


409. Seeding Campgrounds
========================
We want to create a file ('index.js' below) solely to clear out then seed our database when reqd
Use the following link to get the data files:
	https://github.com/Colt/YelpCamp/tree/c12b6ca9576b48b579bc304f701ebb71d6f9879a/seeds
From the above location copy files 'cities.js' & 'seedHelpers.js' to a new folder called 'seeds'
In the seeds folder create a file called 'index.js', use this to:
	Connect to mongoose and validate your DB connection:
		For the connection add an event listener to listen out for errors
		For a 'successful DB open' event create a one time listener
	In the 'seeds' folder create an index.js file with an async function 'seedDB()' to: 
		Clear the campgrounds collection of all documents
	Import from cities.js & seedHelpers.js
	Create a function to generate a random index for whatever array is passed to it.
	Use a for-loop to:	
		Using above random index, bring in the cities combining city & state for the location field
		Using above random index, combine 'descriptor' & 'place' fields for the title field
		Run seeds/index.js using node, not nodemon
		And you should end up with something like this in your 'campgrounds' collection:
{ ..., "title" : "Maple Hunting Camp", "location" : "Plymouth, Minnesota", "__v" : 0 }
{ ..., "title" : "Elk Mule Camp", "location" : "Newark, New Jersey", "__v" : 0 }
{ ..., "title" : "Forest Bay", "location" : "Lawrence, Massachusetts", "__v" : 0 }
{ ..., "title" : "Diamond Creek", "location" : "Shelton, Connecticut", "__v" : 0 }
	If 'seedDB()' has created the above i.e. has run successfully then it will have returned a promise:
		Use this to close the DB connection
	In the Mongo console count the number of rows created.
	
	
410. Campground Index
=====================
Get rid of the "app.get('/makeCampGround',..." route.
Create an camp ground index route:
	This should render a new file in views/campgrounds/index.ejs
	Use a for loop in the ejs file to iterate through all the camp grounds as a <li>
	
	
411. Campground Show
====================
Creat a route for displaying a campground based on the document ObjectId e.g. '/campgrounds/61f80ed...'
Ammend 'index.js' so that the list of campgrounds is a list of links.
Create an ejs file for displaying this single campground called 'show.ejs'
Implement the find within this new route using the route parameter
Display the campground's title, location in 'show.ejs'


412. Campground New & Create
============================
To create a new record (campground) we need two different routes:
	The 'new form' route for entering data and the 'create route' for posting data i.e. a post.
	Create 'new.ejs' for the form so users can enter 'title' and 'location' (don't worry about cosmetics):
		Also group 'title' & 'location' in 'new.ejs' so I can use 'req.body.campground' in 'app.js'
	Create the 'new form' route in 'app.js'
	You may come up against a perplexing problem if 'new' form won't display. Clue is 'route order'
	Now setup your post route in 'app.js' then simply render your form data for now:
		If this doesn't display? Clue: parsing
INTERMEDIATE
============
	Insert this new campground and save
	Redirect back to the 'show' page to display the new campground
	On the show page add a link for getting back to the campground index
	
	
413. Campground Edit & Update
=============================
Add a route for when a campground is to be edited:
	i.e. '/campgrounds/:id/edit'
	And display the campground in a 'edit' template called 'edit.ejs'
		This template should display the campsite obviously
	In the show template add an edit link for the current displayed campground and test it
		Make sure the link takes you to the edit template now displaying the campground to be edited
	Add a button to update the campground in the 'edit' template
	Install & setup a package which allows us to override our get/post form requests in HTML
	Write a simple put route:
		In the 'edit' template override the form's method
		Write a bare bones 'put' route and output a simple console message
		Now setup the action for the 'edit' template's form
		In 'app.js' develop the put route:
			Use the campgrounds ID to find and update the document
				Try using the spread operator to assign the values
				Redirect to the display the result of the edit using the campground template 'show.ejs'
	
	
414. Campground Delete
======================
Create a delete route:
	Get the ID from the params
	Find it and delete it
	Redirect to the index template
Now make the button to send that delete request:
	In the template 'show.ejs':
		Use a form element and a button to call the 'delete' route to action the delete


417. Using Morgan - Logger Middleware
=====================================
Install Morgan
Use it to output to the console


419. More Middleware Practice
=============================
Write a piece of express middleware which will:
	Output the HTML verb and path of the get request
	Once above is run, make it so execution continues as normal
	Screw with things and make every request a 'GET' request
	

420. Setting up a 404 Route
===========================
Setup a middleware to run for a specific URL
Use middleware to raise a 404 error
	
	
421. Password Middleware Demo
=============================
Setup middleware which will only allow pages to be displayed when the query contains the correct password


422. Protecting Specific Routes
===============================
Protect a specific route using stragetically placed middleware you create


423. A New EJS Tool For Layouts (Injecting layouts)
===================================================
This is similar to how template literals work
Install node package ejs-mate
Tell express that we are using an engine for EJS
In your 'views' folder define a new folder called 'layouts'
In layouts create a boilerplate file so only the content of the body is unique
Apply to edit, new, show, index, campground


424. Bootstrap 5, Boilerplate
=============================
We'll be using Bootstrap from here on in
Implement Bootstrap 5 to the EJS boilerplate i.e. CSS & JS bundle
In the boilerplate put a 'main' container around the body and use a BS class 'container'


425. Navbar Partial
===================
For the boilerplate:
	Reference Resource Data: Implement the navbar:
		Make the navbar dark
		Make it sticky
		Update the brand to 'Yelp Camp'
		Get rid of aria-current="page" & active class for 'Home' and use '/' as link
		Change 'Features' to 'Campgrounds' incl link
		Likewise 'Pricing' to 'New Campground'
		Remove 'Disabled' link completely
	Apply a margin top of 5 to the container
	Okay so for 'boilerplate.ejs' we want to move the navbar element out:
		To make the 'boilerplate' cleaner looking use partials
		Create a 'partials' folder in 'views' and implement
	
	
426. Navbar Footer
==================
Create partial called 'footer.ejs':
	Assign the following class="footer bg-dark">
	Surround <span>Yelp Camp 2022</span> with a div of class container
	Increase the footer vertical padding to 3
	Add the class 'text-muted'
	Prefix the copyright symbol to the text
Lets use flexbox so the footer is at the bottom of a min height page:
	Use flexbox for the body
	Move the footer to the bottom of the page @2:33
	
	
427. Adding Images
==================
Let's seed the DB with images from 'Unsplash.com':
	In the seed file index.js assign values for image, description & price
		price should be a random number
		description can be anything
		image will be this string: 'https://source.unsplash.com/collection/483251'
			Hopefully everytime you call above link you will get a different image
	Now reseed the DB
Let's now ammend 'show.ejs' to show the image and description under location


428. Styling Campgrounds Index
==============================
Take a look here for Bootstrap viewport widths (pixels) xs, sm, md, lg, xl:
	https://getbootstrap.com/docs/4.0/layout/grid/
Replace the UL/LI elements and use a bootstrap card:
	Use BS card class giving it a margin of 3
		Use the row class
			Use the column class so that anything above sml should be 25%
				This is where your image goes
			Use another column class for your text using the remainding 75%
				Use the card-body class to encapsulate card classes for:
					title, description and location
						location text should be small & muted
					
				
					
					